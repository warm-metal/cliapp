/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/warm-metal/cliapp/pkg/apis/cliapp/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CliAppLister helps list CliApps.
// All objects returned here must be treated as read-only.
type CliAppLister interface {
	// List lists all CliApps in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.CliApp, err error)
	// CliApps returns an object that can list and get CliApps.
	CliApps(namespace string) CliAppNamespaceLister
	CliAppListerExpansion
}

// cliAppLister implements the CliAppLister interface.
type cliAppLister struct {
	indexer cache.Indexer
}

// NewCliAppLister returns a new CliAppLister.
func NewCliAppLister(indexer cache.Indexer) CliAppLister {
	return &cliAppLister{indexer: indexer}
}

// List lists all CliApps in the indexer.
func (s *cliAppLister) List(selector labels.Selector) (ret []*v1.CliApp, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.CliApp))
	})
	return ret, err
}

// CliApps returns an object that can list and get CliApps.
func (s *cliAppLister) CliApps(namespace string) CliAppNamespaceLister {
	return cliAppNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CliAppNamespaceLister helps list and get CliApps.
// All objects returned here must be treated as read-only.
type CliAppNamespaceLister interface {
	// List lists all CliApps in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.CliApp, err error)
	// Get retrieves the CliApp from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.CliApp, error)
	CliAppNamespaceListerExpansion
}

// cliAppNamespaceLister implements the CliAppNamespaceLister
// interface.
type cliAppNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CliApps in the indexer for a given namespace.
func (s cliAppNamespaceLister) List(selector labels.Selector) (ret []*v1.CliApp, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.CliApp))
	})
	return ret, err
}

// Get retrieves the CliApp from the indexer for a given namespace and name.
func (s cliAppNamespaceLister) Get(name string) (*v1.CliApp, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("cliapp"), name)
	}
	return obj.(*v1.CliApp), nil
}
